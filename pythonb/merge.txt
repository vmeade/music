[wvin@wvin ~]$ python3 pip install pandas numpy
python3: can't open file 'pip': [Errno 2] No such file or directory
[wvin@wvin ~]$ python3 pip3 install pandas numpy
python3: can't open file 'pip3': [Errno 2] No such file or directory
[wvin@wvin ~]$ pip3 install pandas numpy
Defaulting to user installation because normal site-packages is not writeable

Collecting pandas
  Downloading pandas-1.1.1-cp38-cp38-manylinux1_x86_64.whl (10.4 MB)
     |████████████████████████████████| 10.4 MB 2.3 MB/s 
Requirement already satisfied: numpy in /usr/lib/python3.8/site-packages (1.18.4)
Collecting python-dateutil>=2.7.3
  Downloading python_dateutil-2.8.1-py2.py3-none-any.whl (227 kB)
     |████████████████████████████████| 227 kB 15.5 MB/s 
Collecting pytz>=2017.2
  Downloading pytz-2020.1-py2.py3-none-any.whl (510 kB)
     |████████████████████████████████| 510 kB 10.5 MB/s 
Requirement already satisfied: six>=1.5 in /usr/lib/python3.8/site-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)
Installing collected packages: python-dateutil, pytz, pandas
Successfully installed pandas-1.1.1 python-dateutil-2.8.1 pytz-2020.1
[wvin@wvin ~]$ 
[wvin@wvin ~]$ python3
Python 3.8.3 (default, May 17 2020, 18:15:42) 
[GCC 10.1.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import numpy as np
>>> import pandas as pd
>>> from pandas import Series,DataFrame
>>> dframe1 = DataFrame({'key':['X','Y','Z','X','X'],'data_set_1':np.arrange(6)})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/lib/python3.8/site-packages/numpy/__init__.py", line 219, in __getattr__
    raise AttributeError("module {!r} has no attribute "
AttributeError: module 'numpy' has no attribute 'arrange'
>>> dframe1 = DataFrame({'key':['X','Y','Z','X','X'],'data_set_1':np.arange(6)})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/home/wvin/.local/lib/python3.8/site-packages/pandas/core/frame.py", line 468, in __init__
    mgr = init_dict(data, index, columns, dtype=dtype)
  File "/home/wvin/.local/lib/python3.8/site-packages/pandas/core/internals/construction.py", line 283, in init_dict
    return arrays_to_mgr(arrays, data_names, index, columns, dtype=dtype)
  File "/home/wvin/.local/lib/python3.8/site-packages/pandas/core/internals/construction.py", line 78, in arrays_to_mgr
    index = extract_index(arrays)
  File "/home/wvin/.local/lib/python3.8/site-packages/pandas/core/internals/construction.py", line 397, in extract_index
    raise ValueError("arrays must all be same length")
ValueError: arrays must all be same length
>>> dframe1 = DataFrame({'key':['X','Z','Y','Z','X','X'],'data_set_1':np.arange(6)})
>>> dframe1
  key  data_set_1
0   X           0
1   Z           1
2   Y           2
3   Z           3
4   X           4
5   X           5
>>> dframe2 = DataFrame({'key':['Q','Y','Z'],'data_set_2':[1,2,3]})
>>> dframe2
  key  data_set_2
0   Q           1
1   Y           2
2   Z           3
>>> pd.merge(dframe1,dframe2)
  key  data_set_1  data_set_2
0   Z           1           3
1   Z           3           3
2   Y           2           2
>>> pd.merge(dframe1,dframe2,on='key')
  key  data_set_1  data_set_2
0   Z           1           3
1   Z           3           3
2   Y           2           2
>>> pd.merge(dframe1,dframe2,on='key',how='left')
  key  data_set_1  data_set_2
0   X           0         NaN
1   Z           1         3.0
2   Y           2         2.0
3   Z           3         3.0
4   X           4         NaN
5   X           5         NaN
>>> dframe2
  key  data_set_2
0   Q           1
1   Y           2
2   Z           3
>>> pd.merge(dframe1,dframe2,on='key',how='right')
  key  data_set_1  data_set_2
0   Q         NaN           1
1   Y         2.0           2
2   Z         1.0           3
3   Z         3.0           3
>>> pd.merge(dframe1,dframe2,on='key',how='outer')
  key  data_set_1  data_set_2
0   X         0.0         NaN
1   X         4.0         NaN
2   X         5.0         NaN
3   Z         1.0         3.0
4   Z         3.0         3.0
5   Y         2.0         2.0
6   Q         NaN         1.0
>>> dframe3 = DataFrame({'key':['X','X','X','Y','Z','Z'],'data_set_3':np.arrange(6)})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/lib/python3.8/site-packages/numpy/__init__.py", line 219, in __getattr__
    raise AttributeError("module {!r} has no attribute "
AttributeError: module 'numpy' has no attribute 'arrange'
>>> dframe3 = DataFrame({'key':['X','X','X','Y','Z','Z'],'data_set_3':np.arange(6)})
>>> dframe4 = DataFrame({'key':['Y','Y','X','X','Z'],'data_set_4':np.arange(5)})
>>> dframe3
  key  data_set_3
0   X           0
1   X           1
2   X           2
3   Y           3
4   Z           4
5   Z           5
>>> dframe4
  key  data_set_4
0   Y           0
1   Y           1
2   X           2
3   X           3
4   Z           4
>>> pd.merge(dframe3,dframe4)
  key  data_set_3  data_set_4
0   X           0           2
1   X           0           3
2   X           1           2
3   X           1           3
4   X           2           2
5   X           2           3
6   Y           3           0
7   Y           3           1
8   Z           4           4
9   Z           5           4
>>> df_left = DataFrame({'key1':['SF','SF','LA'],'key2':['one','two','one'],'left_data':[10,20,30]})
>>> df_right = DataFrame({'key1':['SF','SF','LA','LA'],'key2':['one','one','one','two'],'right_data':[40,50,60,70]})
>>> df_left
  key1 key2  left_data
0   SF  one         10
1   SF  two         20
2   LA  one         30
>>> df_right
  key1 key2  right_data
0   SF  one          40
1   SF  one          50
2   LA  one          60
3   LA  two          70
>>> pd.merge(df_left,df_right,on=['key1','key2'],how='outer')
  key1 key2  left_data  right_data
0   SF  one       10.0        40.0
1   SF  one       10.0        50.0
2   SF  two       20.0         NaN
3   LA  one       30.0        60.0
4   LA  two        NaN        70.0
>>> pd.merge(df_left,df_right,on='key1')
  key1 key2_x  left_data key2_y  right_data
0   SF    one         10    one          40
1   SF    one         10    one          50
2   SF    two         20    one          40
3   SF    two         20    one          50
4   LA    one         30    one          60
5   LA    one         30    two          70
>>> pd.merge(df_left,df_right,on='key1',suffixes=('_lefty','_righty'))
  key1 key2_lefty  left_data key2_righty  right_data
0   SF        one         10         one          40
1   SF        one         10         one          50
2   SF        two         20         one          40
3   SF        two         20         one          50
4   LA        one         30         one          60
5   LA        one         30         two          70
>>> df_left
  key1 key2  left_data
0   SF  one         10
1   SF  two         20
2   LA  one         30
>>> df_right
  key1 key2  right_data
0   SF  one          40
1   SF  one          50
2   LA  one          60
3   LA  two          70
